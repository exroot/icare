{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { NextSeo } from \"next-seo\";\nexport const SEOconfig = {\n  url: process.env.NEXT_PUBLIC_CLIENT_URL,\n  title: \"Shoutmo\",\n  description: \"Join now to start sharing your connections today.\",\n  type: \"website\",\n  image: \"\"\n};\n\nconst SEO = (_ref) => {\n  let {\n    title,\n    description,\n    slug,\n    type,\n    openGraph\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"title\", \"description\", \"slug\", \"type\", \"openGraph\"]);\n\n  const metaTitle = title ? `${SEOconfig.title} – ${title}` : SEOconfig.title;\n  const metaDescription = description !== null && description !== void 0 ? description : SEOconfig.description;\n  const metaURL = [SEOconfig.url, slug].filter(Boolean).join(\"\");\n  const metaType = type !== null && type !== void 0 ? type : SEOconfig.type;\n  return __jsx(NextSeo, _extends({\n    title: metaTitle,\n    description: metaDescription,\n    type: metaType,\n    facebook: {\n      appId: process.env.NEXT_PUBLIC_FACEBOOK_APP_ID\n    },\n    openGraph: _objectSpread({\n      type: metaType,\n      url: metaURL,\n      site_name: SEOconfig.title,\n      title: title !== null && title !== void 0 ? title : SEOconfig.title,\n      images: [{\n        url: process.env.NEXT_PUBLIC_CLIENT_URL + \"img/shoutmo.png\",\n        width: 1000,\n        height: 300,\n        alt: \"Shoutmo image\"\n      }]\n    }, openGraph)\n  }, props));\n};\n\nexport default SEO;","map":{"version":3,"sources":["/home/binaural14/projects/personal/icare/components/SEO.jsx"],"names":["NextSeo","SEOconfig","url","process","env","NEXT_PUBLIC_CLIENT_URL","title","description","type","image","SEO","slug","openGraph","props","metaTitle","metaDescription","metaURL","filter","Boolean","join","metaType","appId","NEXT_PUBLIC_FACEBOOK_APP_ID","site_name","images","width","height","alt"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,UAAxB;AAEA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBADM;AAEvBC,EAAAA,KAAK,EAAE,SAFgB;AAGvBC,EAAAA,WAAW,EAAE,mDAHU;AAIvBC,EAAAA,IAAI,EAAE,SAJiB;AAKvBC,EAAAA,KAAK,EAAE;AALgB,CAAlB;;AAQP,MAAMC,GAAG,GAAG,UAA6D;AAAA,MAA5D;AAAEJ,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBI,IAAAA,IAAtB;AAA4BH,IAAAA,IAA5B;AAAkCI,IAAAA;AAAlC,GAA4D;AAAA,MAAZC,KAAY;;AACvE,QAAMC,SAAS,GAAGR,KAAK,GAAI,GAAEL,SAAS,CAACK,KAAM,MAAKA,KAAM,EAAjC,GAAqCL,SAAS,CAACK,KAAtE;AACA,QAAMS,eAAe,GAAGR,WAAH,aAAGA,WAAH,cAAGA,WAAH,GAAkBN,SAAS,CAACM,WAAjD;AACA,QAAMS,OAAO,GAAG,CAACf,SAAS,CAACC,GAAX,EAAgBS,IAAhB,EAAsBM,MAAtB,CAA6BC,OAA7B,EAAsCC,IAAtC,CAA2C,EAA3C,CAAhB;AACA,QAAMC,QAAQ,GAAGZ,IAAH,aAAGA,IAAH,cAAGA,IAAH,GAAWP,SAAS,CAACO,IAAnC;AAEA,SACE,MAAC,OAAD;AACE,IAAA,KAAK,EAAEM,SADT;AAEE,IAAA,WAAW,EAAEC,eAFf;AAGE,IAAA,IAAI,EAAEK,QAHR;AAIE,IAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAElB,OAAO,CAACC,GAAR,CAAYkB;AADX,KAJZ;AAOE,IAAA,SAAS;AACPd,MAAAA,IAAI,EAAEY,QADC;AAEPlB,MAAAA,GAAG,EAAEc,OAFE;AAGPO,MAAAA,SAAS,EAAEtB,SAAS,CAACK,KAHd;AAIPA,MAAAA,KAAK,EAAEA,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAWL,SAAS,CAACK,KAJnB;AAKPkB,MAAAA,MAAM,EAAE,CACN;AACEtB,QAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,GAAqC,iBAD5C;AAEEoB,QAAAA,KAAK,EAAE,IAFT;AAGEC,QAAAA,MAAM,EAAE,GAHV;AAIEC,QAAAA,GAAG,EAAE;AAJP,OADM;AALD,OAaJf,SAbI;AAPX,KAsBMC,KAtBN,EADF;AA0BD,CAhCD;;AAkCA,eAAeH,GAAf","sourcesContent":["import { NextSeo } from \"next-seo\";\n\nexport const SEOconfig = {\n  url: process.env.NEXT_PUBLIC_CLIENT_URL,\n  title: \"Shoutmo\",\n  description: \"Join now to start sharing your connections today.\",\n  type: \"website\",\n  image: \"\",\n};\n\nconst SEO = ({ title, description, slug, type, openGraph, ...props }) => {\n  const metaTitle = title ? `${SEOconfig.title} – ${title}` : SEOconfig.title;\n  const metaDescription = description ?? SEOconfig.description;\n  const metaURL = [SEOconfig.url, slug].filter(Boolean).join(\"\");\n  const metaType = type ?? SEOconfig.type;\n\n  return (\n    <NextSeo\n      title={metaTitle}\n      description={metaDescription}\n      type={metaType}\n      facebook={{\n        appId: process.env.NEXT_PUBLIC_FACEBOOK_APP_ID,\n      }}\n      openGraph={{\n        type: metaType,\n        url: metaURL,\n        site_name: SEOconfig.title,\n        title: title ?? SEOconfig.title,\n        images: [\n          {\n            url: process.env.NEXT_PUBLIC_CLIENT_URL + \"img/shoutmo.png\",\n            width: 1000,\n            height: 300,\n            alt: \"Shoutmo image\",\n          },\n        ],\n        ...openGraph,\n      }}\n      {...props}\n    />\n  );\n};\n\nexport default SEO;\n"]},"metadata":{},"sourceType":"module"}