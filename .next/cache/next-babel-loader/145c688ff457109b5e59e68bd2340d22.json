{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react';\nimport { SWRConfig } from 'swr';\nimport NProgress from 'nprogress';\nimport Router, { useRouter } from 'next/router';\nimport { ToastProvider } from 'react-toast-notifications';\nimport { GlobalStyles } from 'twin.macro';\nimport { CacheProvider } from '@emotion/react';\nimport { cache } from '@emotion/css';\nimport * as gtag from '../lib/gtag';\nimport fetcher from '../lib/fetcher';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport '../styles/global.scss';\nimport '../styles/slick.scss';\nimport '../styles/nprogress.scss';\nNProgress.configure({\n  showSpinner: false\n});\n\nRouter.onRouteChangeStart = function () {\n  return NProgress.start();\n};\n\nRouter.onRouteChangeComplete = function () {\n  return NProgress.done();\n};\n\nRouter.onRouteChangeError = function () {\n  return NProgress.done();\n};\n\nfunction MyApp(_ref) {\n  _s();\n\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  var router = useRouter();\n  useEffect(function () {\n    var handleRouteChange = function handleRouteChange(url) {\n      gtag.pageview(url);\n    };\n\n    router.events.on('routeChangeComplete', handleRouteChange);\n    return function () {\n      router.events.off('routeChangeComplete', handleRouteChange);\n    };\n  }, [router.events]);\n  return __jsx(SWRConfig, {\n    value: {\n      fetcher: fetcher\n    }\n  }, __jsx(CacheProvider, {\n    value: cache\n  }, __jsx(GlobalStyles, null), __jsx(ToastProvider, {\n    autoDismissTimeout: 5000,\n    placement: \"bottom-right\"\n  }, __jsx(Component, pageProps))));\n}\n\n_s(MyApp, \"vQduR7x+OPXj6PSmJyFnf+hU7bg=\", false, function () {\n  return [useRouter];\n});\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/home/binaural14/projects/personal/icare/pages/_app.jsx"],"names":["React","useEffect","SWRConfig","NProgress","Router","useRouter","ToastProvider","GlobalStyles","CacheProvider","cache","gtag","fetcher","configure","showSpinner","onRouteChangeStart","start","onRouteChangeComplete","done","onRouteChangeError","MyApp","Component","pageProps","router","handleRouteChange","url","pageview","events","on","off"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,KAA1B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,aAAlC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAO,qCAAP;AACA,OAAO,uBAAP;AACA,OAAO,sBAAP;AACA,OAAO,0BAAP;AAEAR,SAAS,CAACS,SAAV,CAAoB;AAClBC,EAAAA,WAAW,EAAE;AADK,CAApB;;AAIAT,MAAM,CAACU,kBAAP,GAA4B;AAAA,SAAMX,SAAS,CAACY,KAAV,EAAN;AAAA,CAA5B;;AACAX,MAAM,CAACY,qBAAP,GAA+B;AAAA,SAAMb,SAAS,CAACc,IAAV,EAAN;AAAA,CAA/B;;AACAb,MAAM,CAACc,kBAAP,GAA4B;AAAA,SAAMf,SAAS,CAACc,IAAV,EAAN;AAAA,CAA5B;;AAEA,SAASE,KAAT,OAAyC;AAAA;;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvC,MAAMC,MAAM,GAAGjB,SAAS,EAAxB;AACAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMsB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAS;AACjCd,MAAAA,IAAI,CAACe,QAAL,CAAcD,GAAd;AACD,KAFD;;AAGAF,IAAAA,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCJ,iBAAxC;AACA,WAAO,YAAM;AACXD,MAAAA,MAAM,CAACI,MAAP,CAAcE,GAAd,CAAkB,qBAAlB,EAAyCL,iBAAzC;AACD,KAFD;AAGD,GARQ,EAQN,CAACD,MAAM,CAACI,MAAR,CARM,CAAT;AAUA,SACE,MAAC,SAAD;AACE,IAAA,KAAK,EAAE;AACLf,MAAAA,OAAO,EAAPA;AADK;AADT,KAKE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEF;AAAtB,KACE,MAAC,YAAD,OADF,EAEE,MAAC,aAAD;AAAe,IAAA,kBAAkB,EAAE,IAAnC;AAAyC,IAAA,SAAS,EAAC;AAAnD,KACE,MAAC,SAAD,EAAeY,SAAf,CADF,CAFF,CALF,CADF;AAcD;;GA1BQF,K;UACQd,S;;;KADRc,K;AA4BT,eAAeA,KAAf","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react'\nimport { SWRConfig } from 'swr'\nimport NProgress from 'nprogress'\nimport Router, { useRouter } from 'next/router'\nimport { ToastProvider } from 'react-toast-notifications'\nimport { GlobalStyles } from 'twin.macro'\nimport { CacheProvider } from '@emotion/react'\nimport { cache } from '@emotion/css'\nimport * as gtag from '../lib/gtag'\nimport fetcher from '../lib/fetcher'\nimport 'react-image-crop/dist/ReactCrop.css'\nimport '../styles/global.scss'\nimport '../styles/slick.scss'\nimport '../styles/nprogress.scss'\n\nNProgress.configure({\n  showSpinner: false,\n})\n\nRouter.onRouteChangeStart = () => NProgress.start()\nRouter.onRouteChangeComplete = () => NProgress.done()\nRouter.onRouteChangeError = () => NProgress.done()\n\nfunction MyApp({ Component, pageProps }) {\n  const router = useRouter()\n  useEffect(() => {\n    const handleRouteChange = (url) => {\n      gtag.pageview(url)\n    }\n    router.events.on('routeChangeComplete', handleRouteChange)\n    return () => {\n      router.events.off('routeChangeComplete', handleRouteChange)\n    }\n  }, [router.events])\n\n  return (\n    <SWRConfig\n      value={{\n        fetcher,\n      }}\n    >\n      <CacheProvider value={cache}>\n        <GlobalStyles />\n        <ToastProvider autoDismissTimeout={5000} placement=\"bottom-right\">\n          <Component {...pageProps} />\n        </ToastProvider>\n      </CacheProvider>\n    </SWRConfig>\n  )\n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}